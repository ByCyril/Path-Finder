let pos = new Set([
  "0,30",
  "0,80",
  "0,170",
  "0,180",
  "0,310",
  "0,320",
  "0,330",
  "0,370",
  "0,440",
  "0,480",
  "10,30",
  "10,40",
  "10,80",
  "10,90",
  "10,140",
  "10,220",
  "10,240",
  "10,280",
  "10,310",
  "10,380",
  "10,410",
  "10,440",
  "10,450",
  "10,490",
  "20,150",
  "20,260",
  "20,270",
  "20,300",
  "20,320",
  "20,330",
  "20,350",
  "20,400",
  "20,490",
  "30,20",
  "30,30",
  "30,40",
  "30,60",
  "30,70",
  "30,90",
  "30,140",
  "30,150",
  "30,180",
  "30,190",
  "30,210",
  "30,220",
  "30,240",
  "30,330",
  "30,340",
  "30,400",
  "30,460",
  "30,480",
  "40,130",
  "40,160",
  "40,200",
  "40,270",
  "40,300",
  "40,340",
  "40,350",
  "40,360",
  "40,370",
  "40,390",
  "40,420",
  "40,480",
  "40,490",
  "50,20",
  "50,50",
  "50,130",
  "50,140",
  "50,170",
  "50,210",
  "50,220",
  "50,230",
  "50,240",
  "50,320",
  "50,340",
  "50,360",
  "50,380",
  "50,420",
  "50,450",
  "50,460",
  "50,470",
  "60,30",
  "60,60",
  "60,70",
  "60,80",
  "60,90",
  "60,180",
  "60,230",
  "60,260",
  "60,270",
  "60,290",
  "60,300",
  "60,330",
  "60,360",
  "60,400",
  "60,420",
  "60,480",
  "70,0",
  "70,170",
  "70,230",
  "70,240",
  "70,250",
  "70,280",
  "70,300",
  "70,330",
  "70,410",
  "80,20",
  "80,90",
  "80,100",
  "80,130",
  "80,180",
  "80,200",
  "80,210",
  "80,240",
  "80,250",
  "80,290",
  "80,310",
  "80,360",
  "80,380",
  "80,390",
  "80,420",
  "80,450",
  "90,60",
  "90,130",
  "90,170",
  "90,200",
  "90,230",
  "90,280",
  "90,290",
  "90,310",
  "90,320",
  "90,340",
  "90,370",
  "90,450",
  "90,480",
  "100,20",
  "100,50",
  "100,100",
  "100,160",
  "100,190",
  "100,210",
  "100,260",
  "100,310",
  "100,360",
  "100,430",
  "100,450",
  "100,460",
  "110,0",
  "110,20",
  "110,30",
  "110,50",
  "110,60",
  "110,120",
  "110,200",
  "110,210",
  "110,240",
  "110,290",
  "110,300",
  "110,310",
  "110,320",
  "110,360",
  "110,380",
  "110,400",
  "110,420",
  "110,450",
  "110,460",
  "110,490",
  "120,20",
  "120,40",
  "120,50",
  "120,150",
  "120,170",
  "120,180",
  "120,240",
  "120,290",
  "120,320",
  "120,370",
  "120,490",
  "130,0",
  "130,20",
  "130,40",
  "130,120",
  "130,170",
  "130,190",
  "130,280",
  "130,310",
  "130,340",
  "130,350",
  "130,370",
  "130,390",
  "130,400",
  "130,440",
  "130,450",
  "130,470",
  "140,10",
  "140,40",
  "140,60",
  "140,80",
  "140,90",
  "140,130",
  "140,150",
  "140,160",
  "140,170",
  "140,220",
  "140,230",
  "140,240",
  "140,260",
  "140,270",
  "140,300",
  "140,440",
  "140,460",
  "150,10",
  "150,20",
  "150,160",
  "150,180",
  "150,190",
  "150,210",
  "150,220",
  "150,250",
  "150,280",
  "150,320",
  "150,330",
  "150,380",
  "150,420",
  "150,490",
  "160,120",
  "160,130",
  "160,150",
  "160,160",
  "160,180",
  "160,210",
  "160,260",
  "160,280",
  "160,350",
  "160,390",
  "170,80",
  "170,110",
  "170,120",
  "170,210",
  "170,220",
  "170,230",
  "170,260",
  "170,300",
  "170,350",
  "170,360",
  "170,390",
  "170,470",
  "180,20",
  "180,50",
  "180,100",
  "180,190",
  "180,200",
  "180,230",
  "180,270",
  "180,350",
  "180,410",
  "180,490",
  "190,10",
  "190,50",
  "190,150",
  "190,160",
  "190,190",
  "190,400",
  "200,40",
  "200,50",
  "200,70",
  "200,120",
  "200,150",
  "200,180",
  "200,200",
  "200,220",
  "200,260",
  "200,310",
  "200,320",
  "200,340",
  "200,350",
  "200,480",
  "200,490",
  "210,0",
  "210,50",
  "210,90",
  "210,100",
  "210,110",
  "210,140",
  "210,170",
  "210,190",
  "210,220",
  "210,240",
  "210,280",
  "210,290",
  "210,320",
  "210,400",
  "210,410",
  "210,460",
  "220,20",
  "220,30",
  "220,100",
  "220,110",
  "220,200",
  "220,220",
  "220,240",
  "220,250",
  "220,260",
  "220,270",
  "220,280",
  "220,320",
  "220,330",
  "220,370",
  "220,400",
  "220,430",
  "230,0",
  "230,30",
  "230,70",
  "230,200",
  "230,290",
  "230,300",
  "230,330",
  "230,350",
  "230,400",
  "230,430",
  "230,450",
  "230,470",
  "240,0",
  "240,150",
  "240,160",
  "240,180",
  "240,240",
  "240,300",
  "240,310",
  "240,380",
  "250,90",
  "250,160",
  "250,190",
  "250,230",
  "250,260",
  "250,270",
  "250,370",
  "250,390",
  "250,410",
  "250,450",
  "250,480",
  "260,0",
  "260,30",
  "260,70",
  "260,140",
  "260,180",
  "260,230",
  "260,270",
  "260,280",
  "260,290",
  "260,300",
  "260,330",
  "260,370",
  "260,380",
  "260,390",
  "260,400",
  "260,410",
  "260,440",
  "260,470",
  "270,20",
  "270,60",
  "270,140",
  "270,170",
  "270,290",
  "270,400",
  "270,430",
  "270,480",
  "280,0",
  "280,30",
  "280,120",
  "280,130",
  "280,140",
  "280,150",
  "280,240",
  "280,270",
  "280,290",
  "280,340",
  "280,360",
  "280,410",
  "290,10",
  "290,50",
  "290,100",
  "290,160",
  "290,170",
  "290,180",
  "290,190",
  "290,210",
  "290,240",
  "290,250",
  "290,270",
  "290,310",
  "290,330",
  "290,380",
  "290,390",
  "290,420",
  "300,0",
  "300,130",
  "300,140",
  "300,180",
  "300,240",
  "300,320",
  "300,360",
  "300,380",
  "300,440",
  "300,480",
  "310,20",
  "310,50",
  "310,80",
  "310,90",
  "310,170",
  "310,190",
  "310,220",
  "310,280",
  "310,320",
  "310,350",
  "310,400",
  "310,420",
  "310,470",
  "320,10",
  "320,30",
  "320,40",
  "320,150",
  "320,180",
  "320,220",
  "320,240",
  "320,370",
  "320,400",
  "320,460",
  "320,490",
  "330,0",
  "330,40",
  "330,90",
  "330,190",
  "330,360",
  "330,390",
  "330,400",
  "330,420",
  "330,450",
  "330,460",
  "340,40",
  "340,60",
  "340,70",
  "340,90",
  "340,200",
  "340,230",
  "340,260",
  "340,320",
  "340,340",
  "340,390",
  "340,450",
  "350,60",
  "350,110",
  "350,120",
  "350,150",
  "350,170",
  "350,190",
  "350,320",
  "350,330",
  "350,380",
  "350,430",
  "350,470",
  "360,0",
  "360,20",
  "360,50",
  "360,70",
  "360,100",
  "360,130",
  "360,140",
  "360,200",
  "360,230",
  "360,240",
  "360,250",
  "360,260",
  "360,310",
  "360,390",
  "360,410",
  "360,420",
  "360,430",
  "360,440",
  "360,450",
  "360,490",
  "370,20",
  "370,70",
  "370,110",
  "370,150",
  "370,160",
  "370,180",
  "370,200",
  "370,220",
  "370,270",
  "370,320",
  "370,340",
  "370,400",
  "370,430",
  "370,470",
  "370,480",
  "380,30",
  "380,70",
  "380,130",
  "380,170",
  "380,230",
  "380,240",
  "380,260",
  "380,280",
  "380,330",
  "380,380",
  "380,390",
  "390,0",
  "390,10",
  "390,20",
  "390,40",
  "390,60",
  "390,90",
  "390,130",
  "390,150",
  "390,160",
  "390,170",
  "390,190",
  "390,200",
  "390,210",
  "390,230",
  "390,260",
  "390,300",
  "390,320",
  "390,330",
  "390,360",
  "390,370",
  "390,380",
  "390,410",
  "390,450",
  "400,90",
  "400,110",
  "400,220",
  "400,260",
  "400,320",
  "400,350",
  "400,390",
  "400,470",
  "410,0",
  "410,10",
  "410,30",
  "410,70",
  "410,150",
  "410,240",
  "410,270",
  "410,320",
  "410,340",
  "410,380",
  "410,390",
  "410,450",
  "410,460",
  "420,10",
  "420,20",
  "420,30",
  "420,100",
  "420,130",
  "420,140",
  "420,160",
  "420,190",
  "420,210",
  "420,280",
  "420,310",
  "420,320",
  "420,380",
  "420,400",
  "420,430",
  "420,440",
  "420,460",
  "430,30",
  "430,50",
  "430,100",
  "430,110",
  "430,130",
  "430,170",
  "430,190",
  "430,230",
  "430,310",
  "430,380",
  "430,410",
  "430,480",
  "430,490",
  "440,10",
  "440,40",
  "440,50",
  "440,80",
  "440,170",
  "440,310",
  "440,350",
  "440,370",
  "440,390",
  "440,420",
  "440,430",
  "440,460",
  "440,470",
  "440,480",
  "450,40",
  "450,100",
  "450,120",
  "450,150",
  "450,200",
  "450,210",
  "450,230",
  "450,270",
  "450,290",
  "450,330",
  "450,430",
  "450,480",
  "460,20",
  "460,80",
  "460,90",
  "460,130",
  "460,190",
  "460,200",
  "460,290",
  "460,370",
  "460,420",
  "460,440",
  "460,480",
  "470,30",
  "470,90",
  "470,110",
  "470,240",
  "470,300",
  "470,360",
  "470,390",
  "470,440",
  "470,490",
  "480,40",
  "480,70",
  "480,140",
  "480,150",
  "480,210",
  "480,360",
  "480,380",
  "480,430",
  "490,80",
  "490,100",
  "490,120",
  "490,170",
  "490,200",
  "490,210",
  "490,220",
  "490,250",
  "490,300",
  "490,320",
  "490,330",
  "490,390",
  "490,400"
]);

x1 = 47;
y1 = 47;

tx = 0;
ty = 15;
var grid = [];
var track = new Set();
var c = [0, 0];

function setup() {
  createCanvas(500, 500);
  drawGrid();
  c = shortestDirection(x1, y1);
  frameRate(5);
}

function draw() {
  // console.log(grid.length);
  // console.log("init", c);
  if (grid.length != 0) {
    drawGrid2();
    agentMovement();

    fill(0, 0, 255);
    rect(tx * 10, ty * 10, 10, 10);
  }
}
var track = new Set();
var hasVisited = new Set();

function shortestDirection(x, y) {
  var d = [];
  d.push(getDistance(x, y - 1));
  d.push(getDistance(x, y + 1));
  d.push(getDistance(x + 1, y));
  d.push(getDistance(x - 1, y));

  d = sortD(d);
  console.log(x, y, d);
  for (var i = 0; i < d.length; i++) {
    if (isPath(d[i].x, d[i].y)) {
      return [d[i].x, d[i].y];
    }
  }

  let al = Array.from(track);
  // al.pop();

  p = al.pop();
  track.delete(p);
  al = p.split(",");

  let xl = parseInt(al[0]);
  let yl = parseInt(al[1]);

  return shortestDirection(xl, yl);
}

function retract() {}

function sortD(dict) {
  var d = dict;
  for (var i = 0; i < d.length; i++) {
    for (var j = 0; j < d.length; j++) {
      if (d[i].d < d[j].d) {
        let temp = d[i];
        d[i] = d[j];
        d[j] = temp;
      }
    }
  }
  return d;
}
function isPath(x, y) {
  // console.log("here", grid.length);

  if (x == tx && y == ty) {
    noLoop();
    console.log("done");
  }
  return (
    grid[y][x] == 0 && !track.has(x + "," + y) && !hasVisited.has(x + "," + y)
  );
}

function getDistance(x, y) {
  if (x >= 500 || y >= 500) {
    return { d: 1000, x: x, y: y };
  }

  if (x == tx && y == ty) {
    return {
      d: 0,
      x: x,
      y: y
    };
  }

  let a = (tx - x) * (tx - x);
  let b = (ty - y) * (ty - y);

  return {
    d: Math.sqrt(a + b),
    x: x,
    y: y
  };
}

// var c = shortestDirection(x1, y1);
// console.log(c);
function agentMovement() {
  fill(0, 255, 0);

  track.add(c[0] + "," + c[1]);
  hasVisited.add(c[0] + "," + c[1]);
  rect(c[0] * 10, c[1] * 10, 10, 10);
  if (c[0] == tx && c[1] == ty) {
    noLoop();
  }
  c = shortestDirection(c[0], c[1]);
}
